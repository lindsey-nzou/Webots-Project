#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <webots/light_sensor.h>

#define TIME_STEP 64

// Define functions for robot control
void move_forward();
void turn_left();
void turn_right();
void stop_movement();
void find_brightest_light_source();

// Define sensors
WbDeviceTag left_motor, right_motor, distance_sensor, light_sensor;

// Initialize sensors and motors
void initialize_robot() {
  wb_robot_init();

  left_motor = wb_robot_get_device("left wheel motor");
  right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);

  distance_sensor = wb_robot_get_device("ds_sensor");
  wb_distance_sensor_enable(distance_sensor, TIME_STEP);

  light_sensor = wb_robot_get_device("ls_sensor");
  wb_light_sensor_enable(light_sensor, TIME_STEP);
}

// Move robot forward
void move_forward() {
  wb_motor_set_velocity(left_motor, 1.0);
  wb_motor_set_velocity(right_motor, 1.0);
}

// Turn robot left
void turn_left() {
  wb_motor_set_velocity(left_motor, -0.5);
  wb_motor_set_velocity(right_motor, 0.5);
}

// Turn robot right
void turn_right() {
  wb_motor_set_velocity(left_motor, 0.5);
  wb_motor_set_velocity(right_motor, -0.5);
}

// Stop robot
void stop_movement() {
  wb_motor_set_velocity(left_motor, 0);
  wb_motor_set_velocity(right_motor, 0);
}

// Function to navigate the maze and find the brightest light source
void navigate_maze() {
  while (wb_robot_step(TIME_STEP) != -1) {
    double distance_value = wb_distance_sensor_get_value(distance_sensor);
    double light_value = wb_light_sensor_get_value(light_sensor);

    if (distance_value < 500) {
      // Dead-end or obstacle detected
      stop_movement();

      if (light_value > highest_light_intensity) {
        highest_light_intensity = light_value;
        brightest_light_position = current_position;
      }
      turn_right();  // Example maneuver
    } else {
      move_forward();
    }
  }
}

int main() {
  initialize_robot();
  navigate_maze();
  find_brightest_light_source();
  wb_robot_cleanup();
  return 0;
}